package concurrency

import "context"

// Creates an output channel and sends in it values generated by specified function.
// Sets buffer size of an output channel to specified value.
// When specified context is done it returns context's error to gen function.
// When gen function is done it closes output channel.
// Returns output channel.
func Generator[O any](gen func(func(O) error), bufferSize int, ctx context.Context) chan O {
	out := make(chan O, bufferSize)

	go func() {
		defer close(out)
		gen(func(value O) error {
			select {
			case out <- value:
				return nil
			case <-ctx.Done():
				return ctx.Err()
			}
		})
	}()

	return out
}